allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    if (project == rootProject) {
        apply plugin: 'io.github.gradle-nexus.publish-plugin'
    }
}

subprojects {
    if (!project.findProperty("ARTIFACT_VERSION")) {
        return
    }

    apply plugin: 'com.android.library'

    def targetProject = findProperty "target"

    if ("${project.name}" == targetProject) {
        nexusPublishing.repositories {
            sonatype {
                def profileId = findProperty('stagingProfileId')
                stagingProfileId = profileId
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
                snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            }
        }
    }

    android {
        publishing {
            singleVariant("release") {
                withSourcesJar()
                withJavadocJar()
            }
        }
    }

//    task genJavadocs (type: Javadoc) {
//        source = android.sourceSets.main.java.sourceFiles
//        project.android.compileSdkVersion = 'android-' + DEFAULT_COMPILE_SDK_VERSION
//
//        configurations.compileOnly.setCanBeResolved(true)
//        classpath += configurations.compileOnly
//
//        configurations.implementation.setCanBeResolved(true)
//        classpath += configurations.implementation
//
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//
//        android.libraryVariants.all { variant ->
//            if (variant.name == 'release') {
//                owner.classpath += variant.javaCompileProvider.get().classpath
//            }
//        }
////        include javaDocsAllowList
//    }
//
//    task sourceJar(type: Jar) {
//        classifier = 'source'
//        from android.sourceSets.main.java.sourceFiles
//    }
//
//    task javadocJar(type: Jar, dependsOn: genJavadocs) {
//        classifier = 'javadoc'
//        from genJavadocs.destinationDir
//    }

    def artifactVersion = ARTIFACT_VERSION
    def projectURL = findProperty("url")
    def groupID = findProperty("groupId")

    group = groupID
    version = artifactVersion

    afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) {
                    groupId = groupID
                    artifactId = "driver-$project.name"
                    version artifactVersion
//                        artifact sourceJar
//                        artifact javadocJar
                    if (project.plugins.findPlugin("com.android.library")) {
                        from components.release
                    } else {
                        artifact("$buildDir/outputs/aar/$project.name-release.aar")
                    }
                    pom {
                        name = "driver-$project.name"
                            description = "driver-$project.name"
                            url = projectURL
                            licenses {
                                license {
                                    name = 'The Apache License, Version 2.0'
                                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }
                        developers {
                            developer {
                                id = "luke.go"
                                    name = "Luke Go"
                                    email = "sangch.go@gmail.com"
                            }
                        }
                        scm {
                            url = projectURL
                                connection = "scm:${projectURL}.git"
                                developerConnection = "scm:${projectURL}.git"
                        }
                    }
                }
            }
            signing {
                def signingKey = findProperty("signingKey")
                    def signingPassword = findProperty("signingPassword")
                    useInMemoryPgpKeys(signingKey, signingPassword)
                    sign publishing.publications
            }
        }
    }
}
